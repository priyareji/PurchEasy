{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/91799/Documents/project/PURCHeasy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class ErrorService {\n  constructor(injector) {\n    this.injector = injector;\n  }\n\n  log(error) {\n    // Log the error to the console\n    console.error(error); // Send error to server\n\n    const errorToSend = this.addContextInfo(error);\n    return FakeHttpService.post(errorToSend);\n  }\n\n  addContextInfo(error) {\n    // You can include context details here (usually coming from other services: UserService...)\n    const name = error.name || null;\n    const appId = 'Angular_12';\n    const user = 'System';\n    const time = new Date().getTime();\n    const id = `${appId}-${user}-${time}`;\n    const location = this.injector.get(LocationStrategy);\n    const url = location instanceof PathLocationStrategy ? location.path() : '';\n    const status = error.status || null;\n    const message = error.message || error.toString();\n    const stack = error instanceof HttpErrorResponse ? null : error;\n    const errorWithContext = {\n      name,\n      appId,\n      user,\n      time,\n      id,\n      url,\n      status,\n      message,\n      stack\n    };\n    return errorWithContext;\n  }\n\n}\n\nErrorService.ɵfac = function ErrorService_Factory(t) {\n  return new (t || ErrorService)(i0.ɵɵinject(i0.Injector));\n};\n\nErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorService,\n  factory: ErrorService.ɵfac\n});\n\nclass FakeHttpService {\n  static post(error) {\n    return _asyncToGenerator(function* () {\n      return yield error;\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\91799\\Documents\\project\\PURCHeasy\\src\\app\\shared\\error-handler\\utilities\\error.service.ts"],"names":[],"mappings":";AACA,SAAS,gBAAT,EAA2B,oBAA3B,QAAuD,iBAAvD;AACA,SAAS,iBAAT,QAAkC,sBAAlC;;AAIA,OAAM,MAAO,YAAP,CAAmB;AAExB,EAAA,WAAA,CACS,QADT,EAC2B;AAAlB,SAAA,QAAA,GAAA,QAAA;AAER;;AAED,EAAA,GAAG,CAAC,KAAD,EAAW;AACb;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,KAAd,EAFa,CAGb;;AACA,UAAM,WAAW,GAAG,KAAK,cAAL,CAAoB,KAApB,CAApB;AACA,WAAO,eAAe,CAAC,IAAhB,CAAqB,WAArB,CAAP;AACA;;AAED,EAAA,cAAc,CAAC,KAAD,EAAW;AACxB;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,IAAN,IAAc,IAA3B;AACA,UAAM,KAAK,GAAG,YAAd;AACA,UAAM,IAAI,GAAG,QAAb;AACA,UAAM,IAAI,GAAG,IAAI,IAAJ,GAAW,OAAX,EAAb;AACA,UAAM,EAAE,GAAG,GAAG,KAAK,IAAI,IAAI,IAAI,IAAI,EAAnC;AACA,UAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,gBAAlB,CAAjB;AACA,UAAM,GAAG,GAAG,QAAQ,YAAY,oBAApB,GAA2C,QAAQ,CAAC,IAAT,EAA3C,GAA6D,EAAzE;AACA,UAAM,MAAM,GAAG,KAAK,CAAC,MAAN,IAAgB,IAA/B;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,OAAN,IAAiB,KAAK,CAAC,QAAN,EAAjC;AACA,UAAM,KAAK,GAAG,KAAK,YAAY,iBAAjB,GAAqC,IAArC,GAA6C,KAA3D;AAEA,UAAM,gBAAgB,GAAG;AAAE,MAAA,IAAF;AAAQ,MAAA,KAAR;AAAe,MAAA,IAAf;AAAqB,MAAA,IAArB;AAA2B,MAAA,EAA3B;AAA+B,MAAA,GAA/B;AAAoC,MAAA,MAApC;AAA4C,MAAA,OAA5C;AAAqD,MAAA;AAArD,KAAzB;AACA,WAAO,gBAAP;AACA;;AA9BuB;;;mBAAZ,Y,EAAY,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,C;AAAA,C;;;SAAZ,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA;;;AAkCzB,MAAM,eAAN,CAAqB;AACH,SAAJ,IAAI,CAAC,KAAD,EAAW;AAAA;AAC3B,mBAAa,KAAb;AAD2B;AAE3B;;AAHmB","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n\n@Injectable()\nexport class ErrorService {\n\n\tconstructor(\n\t\tprivate injector: Injector,\n\t) {\n\t}\n\n\tlog(error: any) {\n\t\t// Log the error to the console\n\t\tconsole.error(error);\n\t\t// Send error to server\n\t\tconst errorToSend = this.addContextInfo(error);\n\t\treturn FakeHttpService.post(errorToSend);\n\t}\n\n\taddContextInfo(error: any) {\n\t\t// You can include context details here (usually coming from other services: UserService...)\n\t\tconst name = error.name || null;\n\t\tconst appId = 'Angular_12';\n\t\tconst user = 'System';\n\t\tconst time = new Date().getTime();\n\t\tconst id = `${appId}-${user}-${time}`;\n\t\tconst location = this.injector.get(LocationStrategy);\n\t\tconst url = location instanceof PathLocationStrategy ? location.path() : '';\n\t\tconst status = error.status || null;\n\t\tconst message = error.message || error.toString();\n\t\tconst stack = error instanceof HttpErrorResponse ? null : (error);\n\n\t\tconst errorWithContext = { name, appId, user, time, id, url, status, message, stack };\n\t\treturn errorWithContext;\n\t}\n\n}\n\nclass FakeHttpService {\n\tstatic async post(error: any): Promise<any> {\n\t\treturn await error;\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}