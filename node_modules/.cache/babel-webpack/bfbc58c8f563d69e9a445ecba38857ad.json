{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/91799/Documents/project/PURCHeasy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isDevMode } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../notification/notification.service\";\nimport * as i2 from \"./error.service\";\nexport class HandlerService {\n  constructor(ngZone, injector, notificationService, errorService) {\n    this.ngZone = ngZone;\n    this.injector = injector;\n    this.notificationService = notificationService;\n    this.errorService = errorService;\n    this.cancelPendingRequests$ = new Subject();\n  }\n\n  handleError(error) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const router = _this.injector.get(Router);\n\n      if (!navigator.cookieEnabled) {\n        // No Internet connection\n        _this.ngZone.run(() => router.navigate(['/cookie-blocked']));\n\n        return _this.notificationService.notify('Please enable cookies.');\n      }\n\n      if (!navigator.onLine && !isDevMode()) {// No Internet connection\n        // this.ngZone.run(() => router.navigate(['/no-network']));\n        // return this.notificationService.notify('No Internet Connection.');\n      }\n\n      if (!(error instanceof HttpErrorResponse)) {\n        _this.errorService.log(error).then(errorWithContextInfo => {\n          // this.ngZone.run(() => router.navigate(['/error'], { queryParams: errorWithContextInfo }));\n          if (errorWithContextInfo) {\n            if (errorWithContextInfo.name === 'ChunkLoadError') {\n              window.location.reload();\n            }\n          }\n\n          if (isDevMode()) {\n            _this.notificationService.notify('Something went wrong :(');\n          }\n        });\n      }\n\n      return false;\n    })();\n  }\n\n  onTerminateRequest(request) {\n    if (request.method === 'GET' && request.responseType === 'text' && request.url.includes('/assets/svg')) {\n      return new Observable();\n    }\n\n    let canCancel = request.headers.get('cancelable');\n\n    if (request.headers && canCancel === 'N') {\n      return new Observable();\n    }\n\n    return this.cancelPendingRequests$.asObservable();\n  }\n\n}\n\nHandlerService.ɵfac = function HandlerService_Factory(t) {\n  return new (t || HandlerService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.ErrorService));\n};\n\nHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HandlerService,\n  factory: HandlerService.ɵfac\n});","map":{"version":3,"sources":["C:\\Users\\91799\\Documents\\project\\PURCHeasy\\src\\app\\shared\\error-handler\\utilities\\handler.ts"],"names":[],"mappings":";AAAA,SAAqD,SAArD,QAAsE,eAAtE;AACA,SAAS,iBAAT,QAA+C,sBAA/C;AAGA,SAAS,MAAT,QAAuB,iBAAvB;AACA,SAAqB,UAArB,EAAiC,OAAjC,QAAgD,MAAhD;;;;AAGA,OAAM,MAAO,cAAP,CAAqB;AAE1B,EAAA,WAAA,CACS,MADT,EAES,QAFT,EAGS,mBAHT,EAIS,YAJT,EAImC;AAH1B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,mBAAA,GAAA,mBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AALT,SAAA,sBAAA,GAAyB,IAAI,OAAJ,EAAzB;AAMK;;AAEC,EAAA,WAAW,CAAC,KAAD,EAAW;AAAA;;AAAA;AAC3B,YAAM,MAAM,GAAG,KAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,MAAlB,CAAf;;AAEA,UAAI,CAAC,SAAS,CAAC,aAAf,EAA8B;AAC7B;AACA,QAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,MAAM,MAAM,CAAC,QAAP,CAAgB,CAAC,iBAAD,CAAhB,CAAtB;;AACA,eAAO,KAAI,CAAC,mBAAL,CAAyB,MAAzB,CAAgC,wBAAhC,CAAP;AACA;;AAED,UAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,CAAC,SAAS,EAAnC,EAAuC,CACtC;AACA;AACA;AACA;;AAED,UAAI,EAAE,KAAK,YAAY,iBAAnB,CAAJ,EAA2C;AAC1C,QAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAtB,EAA6B,IAA7B,CAAmC,oBAAD,IAAyB;AAC1D;AACA,cAAI,oBAAJ,EAA0B;AACzB,gBAAI,oBAAoB,CAAC,IAArB,KAA8B,gBAAlC,EAAoD;AACnD,cAAA,MAAM,CAAC,QAAP,CAAgB,MAAhB;AACA;AACD;;AACD,cAAI,SAAS,EAAb,EAAiB;AAChB,YAAA,KAAI,CAAC,mBAAL,CAAyB,MAAzB,CAAgC,yBAAhC;AACA;AACD,SAVD;AAWA;;AACD,aAAO,KAAP;AA5B2B;AA6B3B;;AAEM,EAAA,kBAAkB,CAAC,OAAD,EAA0B;AAClD,QAAI,OAAO,CAAC,MAAR,KAAmB,KAAnB,IAA4B,OAAO,CAAC,YAAR,KAAyB,MAArD,IAA+D,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,aAArB,CAAnE,EAAwG;AACvG,aAAO,IAAI,UAAJ,EAAP;AACA;;AACD,QAAI,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,YAApB,CAAhB;;AACA,QAAI,OAAO,CAAC,OAAR,IAAmB,SAAS,KAAK,GAArC,EAA0C;AACzC,aAAO,IAAI,UAAJ,EAAP;AACA;;AACD,WAAO,KAAK,sBAAL,CAA4B,YAA5B,EAAP;AACA;;AAjDyB;;;mBAAd,c,EAAc,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,mBAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,C;;;SAAd,c;AAAc,EAAA,OAAA,EAAd,cAAc,CAAA","sourcesContent":["import { ErrorHandler, Injectable, Injector, NgZone, isDevMode } from '@angular/core';\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { NotificationService } from '../notification/notification.service';\nimport { ErrorService } from './error.service';\nimport { Router } from '@angular/router';\nimport { observable, Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class HandlerService implements ErrorHandler {\n\tcancelPendingRequests$ = new Subject<void>();\n\tconstructor(\n\t\tprivate ngZone: NgZone,\n\t\tprivate injector: Injector,\n\t\tprivate notificationService: NotificationService,\n\t\tprivate errorService: ErrorService\n\t) { }\n\n\tasync handleError(error: any) {\n\t\tconst router = this.injector.get(Router);\n\n\t\tif (!navigator.cookieEnabled) {\n\t\t\t// No Internet connection\n\t\t\tthis.ngZone.run(() => router.navigate(['/cookie-blocked']));\n\t\t\treturn this.notificationService.notify('Please enable cookies.');\n\t\t}\n\n\t\tif (!navigator.onLine && !isDevMode()) {\n\t\t\t// No Internet connection\n\t\t\t// this.ngZone.run(() => router.navigate(['/no-network']));\n\t\t\t// return this.notificationService.notify('No Internet Connection.');\n\t\t}\n\n\t\tif (!(error instanceof HttpErrorResponse)) {\n\t\t\tthis.errorService.log(error).then((errorWithContextInfo) => {\n\t\t\t\t// this.ngZone.run(() => router.navigate(['/error'], { queryParams: errorWithContextInfo }));\n\t\t\t\tif (errorWithContextInfo) {\n\t\t\t\t\tif (errorWithContextInfo.name === 'ChunkLoadError') {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isDevMode()) {\n\t\t\t\t\tthis.notificationService.notify('Something went wrong :(');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic onTerminateRequest(request: HttpRequest<any>): Observable<any> {\n\t\tif (request.method === 'GET' && request.responseType === 'text' && request.url.includes('/assets/svg')) {\n\t\t\treturn new Observable();\n\t\t}\n\t\tlet canCancel = request.headers.get('cancelable');\n\t\tif (request.headers && canCancel === 'N') {\n\t\t\treturn new Observable();\n\t\t}\n\t\treturn this.cancelPendingRequests$.asObservable();\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}