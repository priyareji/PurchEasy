{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/91799/Documents/project/PURCHeasy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nexport class CacheService {\n  constructor() {\n    this.cacheName = ''; // this.cacheName = 'ngsw:1:data:dynamic:bin-api-performance:cache';\n    // ngsw:/:1:data:dynamic:api-session:cache - Dynamic API cache for PWA app\n  }\n\n  clearAllCache(refresh = false) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.clearCacheByNameOrAll(_this.cacheName, true, refresh);\n    })();\n  }\n\n  clearCache(cacheName, baseUrl, reload = false) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (baseUrl) {\n        yield _this2.clearCacheByUrl(cacheName, baseUrl);\n      } else {\n        yield _this2.clearCacheByNameOrAll(cacheName, false, reload);\n      }\n    })();\n  }\n  /**\r\n   * @param nameCacheParam\r\n   * @param allKeys\r\n   */\n\n\n  clearCacheByNameOrAll(nameCacheParam, allKeys = false, reload = false) {\n    var _this3 = this;\n\n    if (window.Cache === undefined) return;\n    caches.keys().then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (cacheNames) {\n        yield Promise.all(cacheNames.filter(cacheName => {\n          console.log(cacheName);\n          if (allKeys) return true; // if (nameCacheParam == cacheName) return true;\n\n          if (nameCacheParam && cacheName.startsWith(nameCacheParam)) return true;\n          return false;\n        }).map(cacheName => {\n          return caches.delete(cacheName).then(res => _this3.logDelete(res, cacheName));\n        }));\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).then(() => {\n      if (reload) {\n        location.reload();\n      }\n    });\n  }\n  /**\r\n   * @param nameCache\r\n   * @param url\r\n   */\n\n\n  clearCacheByUrl(nameCache, url) {\n    caches.open(nameCache).then(c => {\n      c.keys().then(keys => {\n        keys.filter(p => {\n          return p.url.includes(url);\n        }).map(keySearched => c.delete(keySearched.url).then(res => this.logDelete(res, keySearched)));\n      });\n    });\n  }\n\n  logDelete(result, cache) {\n    console.log(`eliminado de cache para ${cache} =>`, result ? 'Satisfactorio' : 'Fallido');\n  }\n\n}\n\nCacheService.ɵfac = function CacheService_Factory(t) {\n  return new (t || CacheService)();\n};\n\nCacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CacheService,\n  factory: CacheService.ɵfac\n});","map":{"version":3,"sources":["C:\\Users\\91799\\Documents\\project\\PURCHeasy\\src\\app\\shared\\services\\cache.service.ts"],"names":[],"mappings":";;AAIA,OAAM,MAAO,YAAP,CAAmB;AAIxB,EAAA,WAAA,GAAA;AAFQ,SAAA,SAAA,GAAoB,EAApB,CAER,CACC;AACA;AACA;;AAEK,EAAA,aAAa,CAAC,OAAO,GAAG,KAAX,EAAgB;AAAA;;AAAA;AAClC,YAAM,KAAI,CAAC,qBAAL,CAA2B,KAAI,CAAC,SAAhC,EAA2C,IAA3C,EAAiD,OAAjD,CAAN;AADkC;AAElC;;AAEK,EAAA,UAAU,CAAC,SAAD,EAAoB,OAApB,EAAqC,MAAA,GAAkB,KAAvD,EAA4D;AAAA;;AAAA;AAC3E,UAAI,OAAJ,EAAa;AACZ,cAAM,MAAI,CAAC,eAAL,CAAqB,SAArB,EAAgC,OAAhC,CAAN;AACA,OAFD,MAEO;AACN,cAAM,MAAI,CAAC,qBAAL,CAA2B,SAA3B,EAAsC,KAAtC,EAA6C,MAA7C,CAAN;AACA;AAL0E;AAM3E;AAED;;;AAGG;;;AACK,EAAA,qBAAqB,CAAC,cAAD,EAAyB,OAAA,GAAmB,KAA5C,EAAmD,MAAA,GAAkB,KAArE,EAA0E;AAAA;;AACtG,QAAI,MAAM,CAAC,KAAP,KAAiB,SAArB,EAAgC;AAChC,IAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AAAA,mCAAmB,WAAO,UAAP,EAAqB;AACvC,cAAM,OAAO,CAAC,GAAR,CACL,UAAU,CAAC,MAAX,CAAmB,SAAD,IAAc;AAC/B,UAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACA,cAAI,OAAJ,EAAa,OAAO,IAAP,CAFkB,CAG/B;;AACA,cAAI,cAAc,IAAI,SAAS,CAAC,UAAV,CAAqB,cAArB,CAAtB,EAA4D,OAAO,IAAP;AAC5D,iBAAO,KAAP;AACA,SAND,EAMG,GANH,CAMQ,SAAD,IAAc;AACpB,iBAAO,MAAM,CAAC,MAAP,CAAc,SAAd,EAAyB,IAAzB,CAA+B,GAAD,IAAS,MAAI,CAAC,SAAL,CAAe,GAAf,EAAoB,SAApB,CAAvC,CAAP;AACA,SARD,CADK,CAAN;AAWA,OAZD;;AAAA;AAAA;AAAA;AAAA,SAYG,IAZH,CAYQ,MAAK;AACZ,UAAI,MAAJ,EAAY;AACX,QAAA,QAAQ,CAAC,MAAT;AACA;AACD,KAhBD;AAiBA;AAED;;;AAGG;;;AACK,EAAA,eAAe,CAAC,SAAD,EAAoB,GAApB,EAA+B;AACrD,IAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,IAAvB,CAA6B,CAAD,IAAM;AACjC,MAAA,CAAC,CAAC,IAAF,GAAS,IAAT,CAAe,IAAD,IAAS;AACtB,QAAA,IAAI,CAAC,MAAL,CAAa,CAAD,IAAM;AAAG,iBAAO,CAAC,CAAC,GAAF,CAAM,QAAN,CAAe,GAAf,CAAP;AAA4B,SAAjD,EACE,GADF,CACO,WAAD,IAAiB,CAAC,CAAC,MAAF,CAAS,WAAW,CAAC,GAArB,EAA0B,IAA1B,CAAgC,GAAD,IAAS,KAAK,SAAL,CAAe,GAAf,EAAoB,WAApB,CAAxC,CADvB;AAEA,OAHD;AAIA,KALD;AAMA;;AAEO,EAAA,SAAS,CAAC,MAAD,EAAkB,KAAlB,EAA4B;AAC5C,IAAA,OAAO,CAAC,GAAR,CAAY,2BAA2B,KAAK,KAA5C,EAAoD,MAAM,GAAG,eAAH,GAAqB,SAA/E;AACA;;AA7DuB;;;mBAAZ,Y;AAAY,C;;;SAAZ,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class CacheService {\n\n\tprivate cacheName: string = '';\n\n\tconstructor() {\n\t\t// this.cacheName = 'ngsw:1:data:dynamic:bin-api-performance:cache';\n\t\t// ngsw:/:1:data:dynamic:api-session:cache - Dynamic API cache for PWA app\n\t}\n\n\tasync clearAllCache(refresh = false) {\n\t\tawait this.clearCacheByNameOrAll(this.cacheName, true, refresh);\n\t}\n\n\tasync clearCache(cacheName: string, baseUrl: string, reload: boolean = false) {\n\t\tif (baseUrl) {\n\t\t\tawait this.clearCacheByUrl(cacheName, baseUrl);\n\t\t} else {\n\t\t\tawait this.clearCacheByNameOrAll(cacheName, false, reload);\n\t\t}\n\t}\n\n\t/**\n\t * @param nameCacheParam\n\t * @param allKeys\n\t */\n\tprivate clearCacheByNameOrAll(nameCacheParam: string, allKeys: boolean = false, reload: boolean = false) {\n\t\tif (window.Cache === undefined) return;\n\t\tcaches.keys().then(async (cacheNames) => {\n\t\t\tawait Promise.all(\n\t\t\t\tcacheNames.filter((cacheName) => {\n\t\t\t\t\tconsole.log(cacheName);\n\t\t\t\t\tif (allKeys) return true;\n\t\t\t\t\t// if (nameCacheParam == cacheName) return true;\n\t\t\t\t\tif (nameCacheParam && cacheName.startsWith(nameCacheParam)) return true;\n\t\t\t\t\treturn false;\n\t\t\t\t}).map((cacheName) => {\n\t\t\t\t\treturn caches.delete(cacheName).then((res) => this.logDelete(res, cacheName));\n\t\t\t\t})\n\t\t\t);\n\t\t}).then(() => {\n\t\t\tif (reload) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param nameCache\n\t * @param url\n\t */\n\tprivate clearCacheByUrl(nameCache: string, url: string) {\n\t\tcaches.open(nameCache).then((c) => {\n\t\t\tc.keys().then((keys) => {\n\t\t\t\tkeys.filter((p) => { return p.url.includes(url) })\n\t\t\t\t\t.map((keySearched) => c.delete(keySearched.url).then((res) => this.logDelete(res, keySearched)))\n\t\t\t})\n\t\t});\n\t}\n\n\tprivate logDelete(result: boolean, cache: any) {\n\t\tconsole.log(`eliminado de cache para ${cache} =>`, (result ? 'Satisfactorio' : 'Fallido'));\n\t}\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}